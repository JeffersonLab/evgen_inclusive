========= What it does  ================
An inclusive event generator from source e- and ion interaction

Estimate "e- DIS, elastic, moller rate" and "hadron rate by Wiser fit"

Generate events distributed according to crossection or uniformly distributed with weight factor

Works for both fixed target and collider (not all models) experiment

========= How to use it  ================

It requires g++ and gfortran (for other configurations, modify the Makefile) and the CTEQ pdf libraries 

1) first you need a working version of cteq C interface library

wget https://desy.de/~znagy/hep-programs/cteq-pdf/cteq-pdf-1.0.4.tar.gz
tar zxf cteq-pdf-1.0.4.tar.gz
cd cteq-pdf-1.0.4/
./configure --prefix="$PWD"
make
make install 

by default is going to write the desired library in /home/${user}/lib and  /home/${user}/share
Use --prefix="$PWD" to have it installed at the current dir

2) The Generator itself (by Seamus Riordan)
Lorenzo Zana added the possibility to specify the input file and output file
Modified the random number generator to TRandom2 class (chosen for period and speed, see http://root.cern.ch/root/html/TRandom.html). The seed now is randomly generated too, so that different parallel simulation could point to the same input file (easier for scripting and parallel processing)

i) setup env (do this before compilation and running the code)

setenv LD_LIBRARY_PATH your_cteq_dir/lib
setenv LIBRARY_PATH your_cteq_dir/lib
source your_root_env_script  (only root5 works for now, root6 doesn't work for TF3->Integral in wiserpion.h)

for example, setup env at jlab ifarm
  setenv LD_LIBRARY_PATH /group/solid/apps/evgen/cteq-pdf-1.0.4/lib
  setenv LIBRARY_PATH /group/solid/apps/evgen/cteq-pdf-1.0.4/lib
  setenv ROOTSYS /group/solid/apps/root/root_v5.34.36.Linux-centos7-x86_64-gcc4.8  
  #source /group/solid/apps/root/root_v5.34.36.Linux-centos7-x86_64-gcc4.8/bin/thisroot.csh
  setenv PATH ${ROOTSYS}/bin:${PATH}  
  if (!($?LD_LIBRARY_PATH)) then
    setenv LD_LIBRARY_PATH ${ROOTSYS}/lib
  else
    setenv LD_LIBRARY_PATH ${ROOTSYS}/lib:${LD_LIBRARY_PATH}
  endif
 
ii) compile it 

cd evgen_inclusive
make (this will create the binary eicRate)
make distclean (clean up)

iii) run it

The code requires the file "output/PolQuarkDist_fine.txt" and "output/PolPdf_Linear.txt" in the running directory.

enter output directory, then run as follows
../eicRate -i input_solid_PVDIS_LD2.dat -o output.root -n 1000 -m 20

see detailed explaintion below
    -i (or -input)    input file name
    -o (or -output)   output file name
    -n (or -nevent)   number of events will be produced
    -m (or -model)    which physics model will be used, see below
    -h (or -help) print this message     
    
    # models
    # 0  pi+		(uniformly distributed with weight)
    # 1  pi-		(uniformly distributed with weight)
    # 2  pi0		(uniformly distributed with weight)
    # 3  K+		(uniformly distributed with weight)
    # 4  K-		(uniformly distributed with weight)
    # 5  Ks		(uniformly distributed with weight)
    # 6  Kl		(uniformly distributed with weight)
    # 7  p		(uniformly distributed with weight)
    # 8  pbar		(uniformly distributed with weight)
    # 10  pi+		(distributed according to crossection)
    # 11  pi-		(distributed according to crossection)
    # 12  pi0		(distributed according to crossection)
    # 13  K+		(distributed according to crossection)
    # 14  K-		(distributed according to crossection)
    # 15  Ks		(distributed according to crossection)
    # 16  Kl		(distributed according to crossection)
    # 17  p		(distributed according to crossection)
    # 18  pbar		(distributed according to crossection)
    # 20  e- DIS        (uniformly distributed with weight)
    # 21  e- Elastic  	(uniformly distributed with weight)
    # 22  e- Moller  	(uniformly distributed with weight)
    # 23  e- P.Bosted fit (uniformly distributed with weight)    

model 20 eDIS use x,y as degree of freedom, other models use angle and mom

model 0-8 has rate=0 when events in non-physical region. 
So nevent in input is just only Ntrials which should be used for normalization, while the only rare > 0  events are sent to output

mode 23 is not fully working

iii) output and analysis result

The output root tree structure is described in output/README
output/plot.C can be used to plot some distribution from root output

The output text file has customized LUND format defined in eicOutput.cxx
for v1.0 (88ad9cb) and before, all models have fixed header lines with 10 entries
after v1.0 (88ad9cb),model 20,21-23,others has all different header lines

It is direct conversion from root file and can be used by GEMC (http://gemc.jlab.org) as input to do Geant4 simulation
particle line follow the webpage definition
header line can be customized with 10 entries before gemc 2.3 or more after gemc 2.6
refer to 
https://hallaweb.jlab.org/wiki/index.php/Detector_simulation_general_note#input_format_and_passing_information_into_output
at https://gemc.jlab.org/gemc/html/documentation/generator/lund.html

some example output files at jlab ifarm /work/halla/solid/evgen/

========= change log  ================

2010    created by Seamus Riordan
2011    hadron with Wiser and LUND format added by Lorenzo Zana
2014/01 events distributed according to crossection added by Seamus Riordan
2014/07 fix collider mode by Zhiwen Zhao
...
2020/04 svn2root by Zhiwen Zhao from https://jlabsvn.jlab.org/svnroot/solid/evgen/eicRate_20101102/
2020/06 update customized lund output header line by Zhiwen Zhao, after v1.0 (88ad9cb)

############(outdated, need to update LUND format) #############################
3) Changing output from root format to lund format 

If you have root tree output, but no lund output. No need to rerun eicRate, just do the conversion with root_to_lund below

cd root_to_lund/
make

ENVIRONMENT VARIABLES FOR COMPILING (example in bash):
If you are using root 5.28 like me seems you need to put some extra environment for your compiler for the "include" 
LD_LIBRARY_PATH=/home/${USER}/lib:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
LIBRARY_PATH=/home/${USER}/lib:${ROOTSYS}/lib:$LIBRARY_PATH; export LIBRARY_PATH
C_INCLUDE_PATH=/home/${USER}/include:${ROOTSYS}/include:$C_INCLUDE_PATH; export C_INCLUDE_PATH
CPLUS_INCLUDE_PATH=/home/${USER}/include:${ROOTSYS}/include:$CPLUS_INCLUDE_PATH; export CPLUS_INCLUDE_PATH

(csh example)
setenv LD_LIBRARY_PATH ${ROOTSYS}/lib:/home/${USER}/lib:${LD_LIBRARY_PATH}
setenv CPLUS_INCLUDE_PATH /home/${USER}/include:${ROOTSYS}/include 
setenv LIBRARY_PATH /home/${USER}/lib:${ROOTSYS}/lib


 root2lund : This Program translate the output from eicRate in LUND format and Filter the scattered electron angles
 Usage: root2lund -o outputfile -i inputfile [-th_min theta_min] [-th_max theta_max] [-ph_min phi_min] [-ph_max phi_max] [-l 1-0] [-g 1-0]
     -o outputfile     : output file name (example pluto.lund)  
     -i inputfile      : input file name (example pluto.root)  
     -h help, print this message 
   [optional] 
     -th_min theta_min : specify theta minimum for scattered electron 
     -th_max theta_max : specify theta maximum for scattered electron 
     -ph_min phi_min   : specify phi minimum for scattered electron 
     -ph_max phi_max   : specify phi maximum for scattered electron 
     -l 1-0            : specify format input file ( lund-> 1 (just angle filtering); root->0 (default) )
     -g 2-1-0          : specify if particle in output is a geantino ( geantino-> 1 ; charged geantino-> 2 ; normal->0 (default) )
 --- 
